using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestBuilderGenerator;

[Generator(LanguageNames.CSharp)]
public class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(PostInitializationCallback);

        var provider = context.SyntaxProvider.ForAttributeWithMetadataName(
            CodeTemplates.AttributeIdentifier,
            SyntaxProviderPredicate,
            SyntaxProviderTransform);

        var compilation = context.CompilationProvider.Combine(provider.Collect());

        context.RegisterSourceOutput(compilation, Execute);
    }

    private void Execute(SourceProductionContext context,
        (Compilation Compilation, ImmutableArray<GenerationData> Data) touple)
    {
        var sb = new StringBuilder();
        var writer = new StringWriter(sb);
        var indentWriter = new IndentedTextWriter(writer);

        foreach (var data in touple.Data)
        {
            if (IsNotPartial(data.Node))
            {
                EmitErrorDiagnostic(context, data.Node);
                continue;
            }

            indentWriter.WriteLine("// <auto-generated/>");
            indentWriter.WriteLine("// lang=c#");

            if (!data.Symbol.ContainingNamespace.IsGlobalNamespace)
            {
                // TODO: not file scoped namespaces
                indentWriter.WriteLine($"namespace {data.Symbol.ContainingNamespace.ToDisplayString()};");
                indentWriter.WriteLine();
            }

            var builderIdentifier = data.Node.Identifier;
            var accessibility = data.Node.Modifiers.First(x=>
                x.IsKind(SyntaxKind.PublicKeyword) ||
                x.IsKind(SyntaxKind.InternalKeyword));

            indentWriter.WriteLine($"{accessibility} partial class {builderIdentifier}");
            indentWriter.WriteLine("{");
            indentWriter.Indent++;

            var properties = data.TargetType.GetMembers().OfType<IPropertySymbol>();
            foreach (var property in properties)
            {
                var name = property.Name;
                var type = property.Type;

                var variableName = name.ToLowerInvariant();
                var fieldName = $"_{variableName}";
                indentWriter.WriteLine($"private {type} {fieldName};");
                indentWriter.WriteLine($"public {builderIdentifier} With{name}({type} {variableName})");
                indentWriter.WriteLine("{");
                indentWriter.Indent++;

                indentWriter.WriteLine($"{fieldName} = {variableName};");
                indentWriter.WriteLine("return this;");

                indentWriter.Indent--;
                indentWriter.WriteLine("}");
                indentWriter.WriteLine();
            }

            indentWriter.WriteLine($"public static {builderIdentifier} Default => new {builderIdentifier}();");
            indentWriter.WriteLine($"public partial {data.TargetType.Name} Build();");
            indentWriter.WriteLine();

            indentWriter.Indent--;
            indentWriter.WriteLine("}");

            indentWriter.WriteLine();
            indentWriter.WriteLine("// </auto-generated>");

            context.AddSource($"{data.Node.Identifier}.g.cs", sb.ToString());
            sb.Clear();
        }
    }

    private static void EmitErrorDiagnostic(SourceProductionContext context, ClassDeclarationSyntax classDeclaration)
    {
        var identifier = classDeclaration.Identifier;
        var location = Location.Create(identifier.SyntaxTree!, identifier.FullSpan);
        var descriptor = new DiagnosticDescriptor(
            "SG0001",
            "Class is not partial",
            $"Missing partial modifier for class {identifier.ToFullString()}",
            "error",
            DiagnosticSeverity.Error,
            true);

        context.ReportDiagnostic(Diagnostic.Create(descriptor, location));
    }

    private static bool IsNotPartial(ClassDeclarationSyntax classDeclaration)
    {
        return !classDeclaration.Modifiers.Any(SyntaxKind.PartialKeyword);
    }

    private static GenerationData SyntaxProviderTransform(GeneratorAttributeSyntaxContext context, CancellationToken cancellationToken)
    {
        var classDeclaration = context.TargetNode as ClassDeclarationSyntax;
        var targetType = context.Attributes.First().AttributeClass.TypeArguments.First();
        // CHECK IF MORE ATTRIBUTES
        return new GenerationData(classDeclaration, context.TargetSymbol, targetType);
    }

    private static bool SyntaxProviderPredicate(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        return syntaxNode is ClassDeclarationSyntax;
    }

    private static void PostInitializationCallback(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource($"{CodeTemplates.AttributeClassName}.g.cs", CodeTemplates.AttributeTemplate);
    }
}
