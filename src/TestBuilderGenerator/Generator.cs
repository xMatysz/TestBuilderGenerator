using System;
using System.CodeDom.Compiler;
using System.Collections.Immutable;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;

namespace TestBuilderGenerator;

[Generator(LanguageNames.CSharp)]
public class Generator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(PostInitializationCallback);

        var provider = context.SyntaxProvider
            .ForAttributeWithMetadataName(
                CodeTemplates.AttributeIdentifier,
                SyntaxProviderPredicate,
                SyntaxProviderTransform)
            .WithComparer(GenerationDataComparer.Instance)
            .Collect();

        var providerWithOptions = context.AnalyzerConfigOptionsProvider.Combine(provider);
        context.RegisterSourceOutput(providerWithOptions, Execute);
    }

    private void Execute(SourceProductionContext context, (AnalyzerConfigOptionsProvider configProvider, ImmutableArray<GenerationData> generationData) provider)
    {
        var sb = new StringBuilder();
        var writer = new StringWriter(sb);
        using var indentWriter = new IndentedTextWriter(writer);

        provider.configProvider.GlobalOptions.TryGetValue("build_property.TestBuilderGenerator_PrintDateTime", out var printDateTime);
        provider.configProvider.GlobalOptions.TryGetValue("build_property.TestBuilderGenerator_UseBlockScopeNamespaces", out var useBlockScopeNamespaces);

        foreach (var data in provider.generationData)
        {
            indentWriter.WriteLine("// <auto-generated/>");
            indentWriter.WriteLine("// lang=c#");

            if (printDateTime is not null)
            {
                indentWriter.WriteLine($"// Generated At {DateTime.UtcNow:s} UTC");
            }

            indentWriter.WriteLine("#nullable enable");
            indentWriter.WriteLine("#pragma warning disable CA5394");

            if (!data.Builder.Namespace.IsGlobalNamespace)
            {
                if (useBlockScopeNamespaces is not null)
                {
                    indentWriter.WriteLine($"namespace {data.Builder.Namespace.FullName}");
                    indentWriter.WriteLine("{");
                    indentWriter.Indent++;
                }
                else
                {
                    indentWriter.WriteLine($"namespace {data.Builder.Namespace.FullName};");
                    indentWriter.WriteLine();
                }
            }

            var builderIdentifier = data.Builder.Name;
            var accessibility = data.Builder.Modifiers.First(x =>
                x.IsKind(SyntaxKind.PublicKeyword) ||
                x.IsKind(SyntaxKind.InternalKeyword));

            indentWriter.WriteLine($"{accessibility} partial class {builderIdentifier}");
            indentWriter.WriteLine("{");
            indentWriter.Indent++;

            var builderProperties = data.Builder.Properties;

            var builderMethods = data.Builder.Methods;

            var properties = data.TargetClass.Properties;

            foreach (var property in properties)
            {
                var propertyName = property.Name;
                var propertyType = property.Type;

                var variableName = propertyName.ToCamelCase();
                var fieldName = $"_{variableName}";

                var defaultPropertyName = $"Default{propertyName}";
                var hasAlreadyDefinedDefaultProperty =
                    builderProperties.Any(x => x.Name == defaultPropertyName);
                if (!hasAlreadyDefinedDefaultProperty)
                {
                    indentWriter.Write($"public static {propertyType} {defaultPropertyName} {{ get; }} = ");
                    switch (propertyType)
                    {
                        case nameof(Guid):
                        case "System.Guid":
                            indentWriter.WriteLine("global::System.Guid.NewGuid();");
                            break;
                        case "int":
                        case nameof(Int32):
                            indentWriter.WriteLine("global::System.Random.Shared.Next();");
                            break;
                        case "long":
                        case nameof(Int64):
                            indentWriter.WriteLine("global::System.Random.Shared.NextInt64();");
                            break;
                        case "float":
                        case nameof(Single):
                            indentWriter.WriteLine("global::System.Random.Shared.NextSingle();");
                            break;
                        case "double":
                        case nameof(Double):
                            indentWriter.WriteLine("global::System.Random.Shared.NextDouble();");
                            break;
                        case "string":
                        case nameof(String) when property.NullableAnnotation != NullableAnnotation.Annotated:
                            indentWriter.WriteLine($"\"{defaultPropertyName}\";");
                            break;
                        case nameof(DateTime):
                            indentWriter.WriteLine("global::System.DateTime.UtcNow;");
                            break;
                        case nameof(DateTimeOffset):
                            indentWriter.WriteLine("global::System.DateTimeOffset.UtcNow;");
                            break;
                        case nameof(Boolean):
                        case "bool":
                            indentWriter.WriteLine("false;");
                            break;
                        case not null when property.IsCollectionType:
                            indentWriter.WriteLine("[];");
                            break;
                        default:
                            indentWriter.WriteLine("default;");
                            break;
                    }
                }

                indentWriter.WriteLine($"private {propertyType} {fieldName} = {defaultPropertyName};");
                var methodName = $"With{propertyName}";
                var hasAlreadyDefinedMethod = builderMethods.Any(x => x.Name == methodName);
                if (!hasAlreadyDefinedMethod)
                {
                    indentWriter.WriteLine(
                        $"public {builderIdentifier} {methodName}({propertyType} {variableName})");
                    indentWriter.WriteLine("{");
                    indentWriter.Indent++;

                    indentWriter.WriteLine($"{fieldName} = {variableName};");
                    indentWriter.WriteLine("return this;");

                    indentWriter.Indent--;
                    indentWriter.WriteLine("}");
                }

                indentWriter.WriteLineNoTabs(string.Empty);
            }

            indentWriter.WriteLine($"public static {builderIdentifier} Default => new {builderIdentifier}();");
            indentWriter.WriteLine($"public partial {data.TargetClass.Identity} Build();");

            indentWriter.Indent--;
            indentWriter.WriteLine("}");

            if (useBlockScopeNamespaces is not null)
            {
                indentWriter.Indent--;
                indentWriter.WriteLine("}");
            }

            indentWriter.WriteLine();
            indentWriter.Write("// </auto-generated>");

            context.AddSource($"{data.Builder.Name}.g.cs", sb.ToString());
            sb.Clear();
        }
    }

    private static GenerationData SyntaxProviderTransform(
        GeneratorAttributeSyntaxContext context,
        CancellationToken cancellationToken)
    {
        var targetType = context.Attributes.First().AttributeClass.TypeArguments.First();
        var classDeclaration = context.TargetNode as ClassDeclarationSyntax;

        var builderNamespace = new NamespaceInfo(context.TargetSymbol.ContainingNamespace);
        var builderProperties = classDeclaration.Members.OfType<PropertyDeclarationSyntax>()
            .Select(PropertyInfo.FromDeclarationSyntax)
            .ToArray();
        var builderMethods = classDeclaration.Members.OfType<MethodDeclarationSyntax>()
            .Select(MethodInfo.FromDeclarationSyntax)
            .ToArray();

        var builderInfo = new BuilderInformation(
            builderNamespace,
            builderProperties,
            builderMethods,
            classDeclaration.Identifier.ValueText,
            classDeclaration.Modifiers);

        var targetClassNamespace = new NamespaceInfo(targetType.ContainingNamespace);
        var targetClassProperties = targetType.GetMembers().OfType<IPropertySymbol>()
            .Where(x => !targetType.IsRecord || x.Name != "EqualityContract")
            .Select(SymbolPropertyInfo.FromSymbol)
            .ToArray();
        var targetClassMethods = targetType.GetMembers().OfType<IMethodSymbol>()
            .Select(MethodInfo.FromSymbol)
            .ToArray();

        var classInfo = new TargetClassInformation(
            targetClassNamespace,
            targetClassProperties,
            targetClassMethods,
            targetType.ToDisplayString(),
            targetType.MetadataName);

        return new GenerationData(builderInfo, classInfo);
    }

    private static bool SyntaxProviderPredicate(SyntaxNode syntaxNode, CancellationToken cancellationToken)
    {
        return syntaxNode is ClassDeclarationSyntax;
    }

    private static void PostInitializationCallback(IncrementalGeneratorPostInitializationContext context)
    {
        context.AddSource($"{CodeTemplates.AttributeClassName}.g.cs", CodeTemplates.AttributeTemplate);
    }
}
